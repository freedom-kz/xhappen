syntax = "proto3";

package protocol.v1;

import "api/protocol/v1/common.proto";
import "errors/errors.proto";

option go_package = "xhappen/api/protocol/v1;v1";
option java_multiple_files = true;
option java_package = "protocol.v1";
option objc_class_prefix = "ProtocolV1";

message Bind{
    DeviceType deviceType = 1;      //设备类型
    string  clientID = 2;           //客户端ID
    LoginType loginType = 3;        //登录类型
    int32 curVersion = 4;           //客户端当前协议版本
    string magic = 5;               //版本魔法数
    uint64 keepAlive = 6;           //心跳超时
    uint32 queueSize = 7;           //最大消息缓存池大小
}

message BindAck{
    bool bindRet = 1;               //响应码
    uint64 serverTimeStamp = 2;     //服务器时间戳
    errors.Status err = 3;          //kratos通用错误
}

message Auth{
    RoleType roleType = 1;          //角色类型
    string token  = 2;              //验证token
    uint64 sequence = 3;            //客户端当前消息序列号
}

message AuthAck{
    bool authRet = 1;               //响应码
    string uid = 2;                 //用户ID
    errors.Status err = 3;          //kratos通用错误
}

message Sync{
    uint32 id = 1;                  //同步会话标识ID,单次连接会话中有效
    uint64 sessionId = 2;           //服务端会话ID，客户端参考使用，可取任意一条消息获取消息收发端状态
    int32 total = 3;                //未读数统计
    repeated Deliver delivers = 4;  //消息数组
}

message SyncAck{
    uint32 id = 1;                  //与syncID一一对应
}

message SyncConfirm{

}

message SubmitOption {
    bool roam = 1;                  //漫游
    bool history = 2;               //保存历史
    bool sync = 3;                  //发送端多端同步
    bool notify = 4;                //需要离线通知
    bool badge = 5;                 //离线通知是否需要计数
    bool persistent = 6;            //离线是否需要持久化
    bool sessionUpdate = 7;         //更新会话最后一条消息
    bool markRead = 8;              //是否需要阅读标记
    bool checkFriend = 9;           //是否需要检查好友关系
}

message Submit{
    uint32 id = 1;                  //消息唯一标识
    bool dup = 2;                   //重发标识
    string to = 3;                  //接收者
    UserType toType = 4;            //接受者类型
    MsgType msgType = 5;            //消息类型
    bytes payload = 6;              //消息正文
    repeated string ats = 7;        //@列表
    bool atAll = 8;                 //是否为@all，为true时，ats不再生效
    string notifyContent = 9;       //自定义通知正文
    SubmitOption option = 10;       //发送选项参数设定
}

message SubmitAck{
    bool submitRet = 1;             //响应标识
    uint32 id = 2;                  //消息唯一标识,一一对应Sumit中id字段, 1-65535，会话期间循环使用，并且在短时间有效时间内（如10分钟）服务端做去重使用
    uint64 sequence = 3;            //CHATROOM APPLICATION类型每一个会话独享，SINGLE、GROUP共享
    uint64 sessionId = 4;           //服务端会话标识，客户端参考使用
    uint64 timestamp = 5;           //服务端时间戳
    errors.Status err = 6;          //kratos通用错误
}


message Deliver{
    uint64 sequence = 1;            //消息序列号
    uint64 sessionId = 2;           //会话ID，客户端参考使用
    string from = 3;                //发送者
    UserType fromType = 4;          //发送者类型
    string to = 5;                  //接收者
    UserType toType = 6;            //接收者类型
    MsgType msgType = 7;            //消息类型
    bytes payload = 8;              //消息负载，内包含json类型的消息业务类型
    uint64 sendTime = 9;            //发送时间
    uint64 editTime = 10;           //编辑时间
    uint64 deleteTime = 11;         //删除时间戳
    uint64 lastReadtime = 12;       //最后阅读时间
}

message DeliverAck{
    bool deliverRet = 1;            //响应结果标识
    uint64 sessionId = 2;           //会话ID，客户端参考使用
    uint64 sequence = 3;            //消息序列号
    errors.Status err = 6;          //kratos通用错误
}

message Action{
    uint32 id = 1;                  //同submit id释义
    bool dup = 2;                   //重复标识
    bytes payload = 3;              //负载
}

message ActionAck{
    bool actionRet = 1;             //响应结果标识
    uint32 id = 2;                  //与Action结构，id字段一一对应
    uint64 timestamp = 3;           //服务端时间戳，客户端发送则忽略
    bytes payload = 4;              //负载
    errors.Status err = 6;          //kratos通用错误
}

message Ping{

}

message Pong{

}

message Quit{

}