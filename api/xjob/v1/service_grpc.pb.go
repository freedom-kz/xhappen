// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.6
// source: api/xjob/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	XJob_Notify_FullMethodName = "/chatnormal.v1.XJob/Notify"
)

// XJobClient is the client API for XJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XJobClient interface {
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyReply, error)
}

type xJobClient struct {
	cc grpc.ClientConnInterface
}

func NewXJobClient(cc grpc.ClientConnInterface) XJobClient {
	return &xJobClient{cc}
}

func (c *xJobClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyReply, error) {
	out := new(NotifyReply)
	err := c.cc.Invoke(ctx, XJob_Notify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XJobServer is the server API for XJob service.
// All implementations must embed UnimplementedXJobServer
// for forward compatibility
type XJobServer interface {
	Notify(context.Context, *NotifyRequest) (*NotifyReply, error)
	mustEmbedUnimplementedXJobServer()
}

// UnimplementedXJobServer must be embedded to have forward compatible implementations.
type UnimplementedXJobServer struct {
}

func (UnimplementedXJobServer) Notify(context.Context, *NotifyRequest) (*NotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedXJobServer) mustEmbedUnimplementedXJobServer() {}

// UnsafeXJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XJobServer will
// result in compilation errors.
type UnsafeXJobServer interface {
	mustEmbedUnimplementedXJobServer()
}

func RegisterXJobServer(s grpc.ServiceRegistrar, srv XJobServer) {
	s.RegisterService(&XJob_ServiceDesc, srv)
}

func _XJob_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XJobServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XJob_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XJobServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XJob_ServiceDesc is the grpc.ServiceDesc for XJob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XJob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatnormal.v1.XJob",
	HandlerType: (*XJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _XJob_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/xjob/v1/service.proto",
}
