// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.6
// source: api/router/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Router_UserDeviceBind_FullMethodName      = "/sequence.v1.Router/UserDeviceBind"
	Router_UserDeviceUnBind_FullMethodName    = "/sequence.v1.Router/UserDeviceUnBind"
	Router_GetRoutersByUserIds_FullMethodName = "/sequence.v1.Router/GetRoutersByUserIds"
	Router_SaveRoomRouter_FullMethodName      = "/sequence.v1.Router/SaveRoomRouter"
	Router_DeleteRoomRouter_FullMethodName    = "/sequence.v1.Router/DeleteRoomRouter"
	Router_GetRoomRouterByID_FullMethodName   = "/sequence.v1.Router/GetRoomRouterByID"
)

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterClient interface {
	// 设备相关操作
	UserDeviceBind(ctx context.Context, in *DeviceBindRequest, opts ...grpc.CallOption) (*DeviceBindReply, error)
	UserDeviceUnBind(ctx context.Context, in *DeviceUnBindRequest, opts ...grpc.CallOption) (*DeviceUnBindReply, error)
	// 查询用户路由
	GetRoutersByUserIds(ctx context.Context, in *RoutersByUserIdsRequest, opts ...grpc.CallOption) (*RoutersByUserIdsReply, error)
	// 房间路由相关
	SaveRoomRouter(ctx context.Context, in *SaveRoomRouterRequest, opts ...grpc.CallOption) (*SaveRoomRouterReply, error)
	DeleteRoomRouter(ctx context.Context, in *DeleteRoomServerRequest, opts ...grpc.CallOption) (*SaveRoomServerReply, error)
	GetRoomRouterByID(ctx context.Context, in *GetRoomRouterByIDRequest, opts ...grpc.CallOption) (*GetRoomRouterByIDReply, error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) UserDeviceBind(ctx context.Context, in *DeviceBindRequest, opts ...grpc.CallOption) (*DeviceBindReply, error) {
	out := new(DeviceBindReply)
	err := c.cc.Invoke(ctx, Router_UserDeviceBind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) UserDeviceUnBind(ctx context.Context, in *DeviceUnBindRequest, opts ...grpc.CallOption) (*DeviceUnBindReply, error) {
	out := new(DeviceUnBindReply)
	err := c.cc.Invoke(ctx, Router_UserDeviceUnBind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) GetRoutersByUserIds(ctx context.Context, in *RoutersByUserIdsRequest, opts ...grpc.CallOption) (*RoutersByUserIdsReply, error) {
	out := new(RoutersByUserIdsReply)
	err := c.cc.Invoke(ctx, Router_GetRoutersByUserIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) SaveRoomRouter(ctx context.Context, in *SaveRoomRouterRequest, opts ...grpc.CallOption) (*SaveRoomRouterReply, error) {
	out := new(SaveRoomRouterReply)
	err := c.cc.Invoke(ctx, Router_SaveRoomRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) DeleteRoomRouter(ctx context.Context, in *DeleteRoomServerRequest, opts ...grpc.CallOption) (*SaveRoomServerReply, error) {
	out := new(SaveRoomServerReply)
	err := c.cc.Invoke(ctx, Router_DeleteRoomRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) GetRoomRouterByID(ctx context.Context, in *GetRoomRouterByIDRequest, opts ...grpc.CallOption) (*GetRoomRouterByIDReply, error) {
	out := new(GetRoomRouterByIDReply)
	err := c.cc.Invoke(ctx, Router_GetRoomRouterByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
// All implementations must embed UnimplementedRouterServer
// for forward compatibility
type RouterServer interface {
	// 设备相关操作
	UserDeviceBind(context.Context, *DeviceBindRequest) (*DeviceBindReply, error)
	UserDeviceUnBind(context.Context, *DeviceUnBindRequest) (*DeviceUnBindReply, error)
	// 查询用户路由
	GetRoutersByUserIds(context.Context, *RoutersByUserIdsRequest) (*RoutersByUserIdsReply, error)
	// 房间路由相关
	SaveRoomRouter(context.Context, *SaveRoomRouterRequest) (*SaveRoomRouterReply, error)
	DeleteRoomRouter(context.Context, *DeleteRoomServerRequest) (*SaveRoomServerReply, error)
	GetRoomRouterByID(context.Context, *GetRoomRouterByIDRequest) (*GetRoomRouterByIDReply, error)
	mustEmbedUnimplementedRouterServer()
}

// UnimplementedRouterServer must be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (UnimplementedRouterServer) UserDeviceBind(context.Context, *DeviceBindRequest) (*DeviceBindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceBind not implemented")
}
func (UnimplementedRouterServer) UserDeviceUnBind(context.Context, *DeviceUnBindRequest) (*DeviceUnBindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceUnBind not implemented")
}
func (UnimplementedRouterServer) GetRoutersByUserIds(context.Context, *RoutersByUserIdsRequest) (*RoutersByUserIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutersByUserIds not implemented")
}
func (UnimplementedRouterServer) SaveRoomRouter(context.Context, *SaveRoomRouterRequest) (*SaveRoomRouterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRoomRouter not implemented")
}
func (UnimplementedRouterServer) DeleteRoomRouter(context.Context, *DeleteRoomServerRequest) (*SaveRoomServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoomRouter not implemented")
}
func (UnimplementedRouterServer) GetRoomRouterByID(context.Context, *GetRoomRouterByIDRequest) (*GetRoomRouterByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomRouterByID not implemented")
}
func (UnimplementedRouterServer) mustEmbedUnimplementedRouterServer() {}

// UnsafeRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServer will
// result in compilation errors.
type UnsafeRouterServer interface {
	mustEmbedUnimplementedRouterServer()
}

func RegisterRouterServer(s grpc.ServiceRegistrar, srv RouterServer) {
	s.RegisterService(&Router_ServiceDesc, srv)
}

func _Router_UserDeviceBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).UserDeviceBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_UserDeviceBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).UserDeviceBind(ctx, req.(*DeviceBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_UserDeviceUnBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUnBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).UserDeviceUnBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_UserDeviceUnBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).UserDeviceUnBind(ctx, req.(*DeviceUnBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_GetRoutersByUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutersByUserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).GetRoutersByUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_GetRoutersByUserIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).GetRoutersByUserIds(ctx, req.(*RoutersByUserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_SaveRoomRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRoomRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SaveRoomRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_SaveRoomRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SaveRoomRouter(ctx, req.(*SaveRoomRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_DeleteRoomRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).DeleteRoomRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_DeleteRoomRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).DeleteRoomRouter(ctx, req.(*DeleteRoomServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_GetRoomRouterByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRouterByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).GetRoomRouterByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_GetRoomRouterByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).GetRoomRouterByID(ctx, req.(*GetRoomRouterByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Router_ServiceDesc is the grpc.ServiceDesc for Router service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Router_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sequence.v1.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserDeviceBind",
			Handler:    _Router_UserDeviceBind_Handler,
		},
		{
			MethodName: "UserDeviceUnBind",
			Handler:    _Router_UserDeviceUnBind_Handler,
		},
		{
			MethodName: "GetRoutersByUserIds",
			Handler:    _Router_GetRoutersByUserIds_Handler,
		},
		{
			MethodName: "SaveRoomRouter",
			Handler:    _Router_SaveRoomRouter_Handler,
		},
		{
			MethodName: "DeleteRoomRouter",
			Handler:    _Router_DeleteRoomRouter_Handler,
		},
		{
			MethodName: "GetRoomRouterByID",
			Handler:    _Router_GetRoomRouterByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/router/v1/service.proto",
}
