syntax = "proto3";

package gateway.v1;

import "api/protocol/v1/message.proto";
import "api/protocol/v1/common.proto";
import "errors/errors.proto";
import "google/protobuf/timestamp.proto";

option go_package = "xhappen/api/gateway/v1;v1";

service GatewaySrv {
    //接收同步消息
    rpc Sync(SyncRequest) returns (SyncReply) {

    }
    //接收下行消息
    rpc Deliver(DeliverRequest) returns (DeliverReply) {

    }

    //广播
    rpc Broadcast(BroadcastRequest) returns (BroadcastReply) {

    }

    //指令
    rpc Action(ActionRequest) returns (ActionReply) {

    }

    //强制断开连接
    rpc DisconnectedForce(DisconnectForceRequest) returns (DisconnectForceReply) {

    }
}

message SyncRequest {
    string userid = 1;          //接收用户ID
    string clientid = 2;        //接收的客户端标志
    protocol.v1.Sync sync = 3;  //数据包
}

message SyncReply {
    bool ret = 1;           //结果
    errors.Status err = 2;          //kratos通用错误
}

message BroadcastRequest {
    repeated string omitClientids = 1; //忽略设备ID
    repeated string omitUserIds = 2; //忽略设备ID
    protocol.v1.Deliver deliver = 3; //消息
}

message BroadcastReply {
    bool ret = 1;           //结果
    errors.Status err = 2;          //kratos通用错误
}

message DeliverRequest {
    string userid = 1; //用户ID
    string clientid = 2; //设备ID
    repeated string omitClientids = 3; //忽略设备ID
    protocol.v1.Deliver deliver = 4; //消息
}

message DeliverReply {
    bool ret = 1; //结果
    errors.Status err = 2;          //kratos通用错误
}

message ActionRequest {
  string uid = 1;
  string clientId = 2;
  protocol.v1.Action action = 3;
}

message ActionReply {
  bool ret = 1;
  errors.Status err = 2;          //kratos通用错误
  uint64 timestamp = 3;
  bytes payload =4;
}

message DisconnectForceRequest {
    string userid = 1; //用户ID
    string clientid = 2; //设备ID
    protocol.v1.DeviceType deviceType = 3; //设备类型
}

message DisconnectForceReply {
    bool ret = 1;           //结果 
    errors.Status err = 2;          //kratos通用错误
}


