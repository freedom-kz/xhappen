// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNKNOWN_ERROR.String() && e.Code == 410
}

func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsSerberUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SERBER_UNAVAILABLE.String() && e.Code == 411
}

func ErrorSerberUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(411, ErrorReason_SERBER_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

func IsRequestTooFast(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REQUEST_TOO_FAST.String() && e.Code == 412
}

func ErrorRequestTooFast(format string, args ...interface{}) *errors.Error {
	return errors.New(412, ErrorReason_REQUEST_TOO_FAST.String(), fmt.Sprintf(format, args...))
}

func IsClientidRejected(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorSocketBindReason_CLIENTID_REJECTED.String() && e.Code == 420
}

func ErrorClientidRejected(format string, args ...interface{}) *errors.Error {
	return errors.New(420, ErrorSocketBindReason_CLIENTID_REJECTED.String(), fmt.Sprintf(format, args...))
}

func IsUpgrade(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorSocketBindReason_UPGRADE.String() && e.Code == 421
}

func ErrorUpgrade(format string, args ...interface{}) *errors.Error {
	return errors.New(421, ErrorSocketBindReason_UPGRADE.String(), fmt.Sprintf(format, args...))
}

func IsLogined(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorSocketBindReason_LOGINED.String() && e.Code == 422
}

func ErrorLogined(format string, args ...interface{}) *errors.Error {
	return errors.New(422, ErrorSocketBindReason_LOGINED.String(), fmt.Sprintf(format, args...))
}

func IsSwithHost(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorSocketBindReason_SWITH_HOST.String() && e.Code == 423
}

func ErrorSwithHost(format string, args ...interface{}) *errors.Error {
	return errors.New(423, ErrorSocketBindReason_SWITH_HOST.String(), fmt.Sprintf(format, args...))
}

func IsBlackDevice(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorSocketBindReason_BLACK_DEVICE.String() && e.Code == 424
}

func ErrorBlackDevice(format string, args ...interface{}) *errors.Error {
	return errors.New(424, ErrorSocketBindReason_BLACK_DEVICE.String(), fmt.Sprintf(format, args...))
}

func IsTokenExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorSocketAuthReason_TOKEN_EXPIRE.String() && e.Code == 430
}

func ErrorTokenExpire(format string, args ...interface{}) *errors.Error {
	return errors.New(430, ErrorSocketAuthReason_TOKEN_EXPIRE.String(), fmt.Sprintf(format, args...))
}

func IsBlackUser(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorSocketAuthReason_BLACK_USER.String() && e.Code == 431
}

func ErrorBlackUser(format string, args ...interface{}) *errors.Error {
	return errors.New(431, ErrorSocketAuthReason_BLACK_USER.String(), fmt.Sprintf(format, args...))
}
