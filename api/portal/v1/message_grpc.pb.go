// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.6
// source: api/portal/v1/message.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Message_SendMessage_FullMethodName   = "/portal.v1.Message/SendMessage"
	Message_EditMessage_FullMethodName   = "/portal.v1.Message/EditMessage"
	Message_RevokeMessage_FullMethodName = "/portal.v1.Message/RevokeMessage"
	Message_ListMessage_FullMethodName   = "/portal.v1.Message/ListMessage"
	Message_MarkMessage_FullMethodName   = "/portal.v1.Message/MarkMessage"
)

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageClient interface {
	// 发送
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error)
	// 编辑
	EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageReply, error)
	// 撤回
	RevokeMessage(ctx context.Context, in *RevokeMessageRequest, opts ...grpc.CallOption) (*RevokeMessageReply, error)
	// 查询
	ListMessage(ctx context.Context, in *ListMessageRequest, opts ...grpc.CallOption) (*ListMessageReply, error)
	// 收藏
	MarkMessage(ctx context.Context, in *MarkMessageRequest, opts ...grpc.CallOption) (*MarkMessageReply, error)
}

type messageClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageClient(cc grpc.ClientConnInterface) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error) {
	out := new(SendMessageReply)
	err := c.cc.Invoke(ctx, Message_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageReply, error) {
	out := new(EditMessageReply)
	err := c.cc.Invoke(ctx, Message_EditMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) RevokeMessage(ctx context.Context, in *RevokeMessageRequest, opts ...grpc.CallOption) (*RevokeMessageReply, error) {
	out := new(RevokeMessageReply)
	err := c.cc.Invoke(ctx, Message_RevokeMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) ListMessage(ctx context.Context, in *ListMessageRequest, opts ...grpc.CallOption) (*ListMessageReply, error) {
	out := new(ListMessageReply)
	err := c.cc.Invoke(ctx, Message_ListMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) MarkMessage(ctx context.Context, in *MarkMessageRequest, opts ...grpc.CallOption) (*MarkMessageReply, error) {
	out := new(MarkMessageReply)
	err := c.cc.Invoke(ctx, Message_MarkMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServer is the server API for Message service.
// All implementations must embed UnimplementedMessageServer
// for forward compatibility
type MessageServer interface {
	// 发送
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error)
	// 编辑
	EditMessage(context.Context, *EditMessageRequest) (*EditMessageReply, error)
	// 撤回
	RevokeMessage(context.Context, *RevokeMessageRequest) (*RevokeMessageReply, error)
	// 查询
	ListMessage(context.Context, *ListMessageRequest) (*ListMessageReply, error)
	// 收藏
	MarkMessage(context.Context, *MarkMessageRequest) (*MarkMessageReply, error)
	mustEmbedUnimplementedMessageServer()
}

// UnimplementedMessageServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServer struct {
}

func (UnimplementedMessageServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageServer) EditMessage(context.Context, *EditMessageRequest) (*EditMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedMessageServer) RevokeMessage(context.Context, *RevokeMessageRequest) (*RevokeMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeMessage not implemented")
}
func (UnimplementedMessageServer) ListMessage(context.Context, *ListMessageRequest) (*ListMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessage not implemented")
}
func (UnimplementedMessageServer) MarkMessage(context.Context, *MarkMessageRequest) (*MarkMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkMessage not implemented")
}
func (UnimplementedMessageServer) mustEmbedUnimplementedMessageServer() {}

// UnsafeMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServer will
// result in compilation errors.
type UnsafeMessageServer interface {
	mustEmbedUnimplementedMessageServer()
}

func RegisterMessageServer(s grpc.ServiceRegistrar, srv MessageServer) {
	s.RegisterService(&Message_ServiceDesc, srv)
}

func _Message_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_EditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).EditMessage(ctx, req.(*EditMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_RevokeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).RevokeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_RevokeMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).RevokeMessage(ctx, req.(*RevokeMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_ListMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).ListMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_ListMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).ListMessage(ctx, req.(*ListMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_MarkMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).MarkMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_MarkMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).MarkMessage(ctx, req.(*MarkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Message_ServiceDesc is the grpc.ServiceDesc for Message service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Message_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portal.v1.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Message_SendMessage_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _Message_EditMessage_Handler,
		},
		{
			MethodName: "RevokeMessage",
			Handler:    _Message_RevokeMessage_Handler,
		},
		{
			MethodName: "ListMessage",
			Handler:    _Message_ListMessage_Handler,
		},
		{
			MethodName: "MarkMessage",
			Handler:    _Message_MarkMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/portal/v1/message.proto",
}
