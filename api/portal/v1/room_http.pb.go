// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.15.6
// source: api/portal/v1/room.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRoomCreateRoom = "/portal.v1.Room/CreateRoom"

type RoomHTTPServer interface {
	// CreateRoom 获取基础配置
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomReply, error)
}

func RegisterRoomHTTPServer(s *http.Server, srv RoomHTTPServer) {
	r := s.Route("/")
	r.POST("/auth/room/create", _Room_CreateRoom0_HTTP_Handler(srv))
}

func _Room_CreateRoom0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoomRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomCreateRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRoom(ctx, req.(*CreateRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoomReply)
		return ctx.Result(200, reply)
	}
}

type RoomHTTPClient interface {
	CreateRoom(ctx context.Context, req *CreateRoomRequest, opts ...http.CallOption) (rsp *CreateRoomReply, err error)
}

type RoomHTTPClientImpl struct {
	cc *http.Client
}

func NewRoomHTTPClient(client *http.Client) RoomHTTPClient {
	return &RoomHTTPClientImpl{client}
}

func (c *RoomHTTPClientImpl) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...http.CallOption) (*CreateRoomReply, error) {
	var out CreateRoomReply
	pattern := "/auth/room/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoomCreateRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
