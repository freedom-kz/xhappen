// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.6
// source: api/portal/v1/basic.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Config_GetBasicConfig_FullMethodName      = "/portal.v1.Config/GetBasicConfig"
	Config_GetSocketHostConfig_FullMethodName = "/portal.v1.Config/GetSocketHostConfig"
)

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	// 获取基础配置
	GetBasicConfig(ctx context.Context, in *GetBasicConfigRequest, opts ...grpc.CallOption) (*GetBasicConfigReply, error)
	GetSocketHostConfig(ctx context.Context, in *GetSocketHostConfigRequest, opts ...grpc.CallOption) (*GetSocketHostConfigReply, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) GetBasicConfig(ctx context.Context, in *GetBasicConfigRequest, opts ...grpc.CallOption) (*GetBasicConfigReply, error) {
	out := new(GetBasicConfigReply)
	err := c.cc.Invoke(ctx, Config_GetBasicConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetSocketHostConfig(ctx context.Context, in *GetSocketHostConfigRequest, opts ...grpc.CallOption) (*GetSocketHostConfigReply, error) {
	out := new(GetSocketHostConfigReply)
	err := c.cc.Invoke(ctx, Config_GetSocketHostConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
// All implementations must embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	// 获取基础配置
	GetBasicConfig(context.Context, *GetBasicConfigRequest) (*GetBasicConfigReply, error)
	GetSocketHostConfig(context.Context, *GetSocketHostConfigRequest) (*GetSocketHostConfigReply, error)
	mustEmbedUnimplementedConfigServer()
}

// UnimplementedConfigServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) GetBasicConfig(context.Context, *GetBasicConfigRequest) (*GetBasicConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicConfig not implemented")
}
func (UnimplementedConfigServer) GetSocketHostConfig(context.Context, *GetSocketHostConfigRequest) (*GetSocketHostConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocketHostConfig not implemented")
}
func (UnimplementedConfigServer) mustEmbedUnimplementedConfigServer() {}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_GetBasicConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasicConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetBasicConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetBasicConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetBasicConfig(ctx, req.(*GetBasicConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetSocketHostConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSocketHostConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetSocketHostConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetSocketHostConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetSocketHostConfig(ctx, req.(*GetSocketHostConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portal.v1.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasicConfig",
			Handler:    _Config_GetBasicConfig_Handler,
		},
		{
			MethodName: "GetSocketHostConfig",
			Handler:    _Config_GetSocketHostConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/portal/v1/basic.proto",
}
