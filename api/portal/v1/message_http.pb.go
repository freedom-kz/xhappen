// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.15.6
// source: api/portal/v1/message.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMessageEditMessage = "/portal.v1.Message/EditMessage"
const OperationMessageListMessage = "/portal.v1.Message/ListMessage"
const OperationMessageMarkMessage = "/portal.v1.Message/MarkMessage"
const OperationMessageRevokeMessage = "/portal.v1.Message/RevokeMessage"
const OperationMessageSendMessage = "/portal.v1.Message/SendMessage"

type MessageHTTPServer interface {
	// EditMessage编辑
	EditMessage(context.Context, *EditMessageRequest) (*EditMessageReply, error)
	// ListMessage查询
	ListMessage(context.Context, *ListMessageRequest) (*ListMessageReply, error)
	// MarkMessage收藏
	MarkMessage(context.Context, *MarkMessageRequest) (*MarkMessageReply, error)
	// RevokeMessage撤回
	RevokeMessage(context.Context, *RevokeMessageRequest) (*RevokeMessageReply, error)
	// SendMessage发送
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error)
}

func RegisterMessageHTTPServer(s *http.Server, srv MessageHTTPServer) {
	r := s.Route("/")
	r.POST("/auth/message/send", _Message_SendMessage0_HTTP_Handler(srv))
	r.POST("/auth/message/send", _Message_EditMessage0_HTTP_Handler(srv))
	r.POST("/auth/message/send", _Message_RevokeMessage0_HTTP_Handler(srv))
	r.POST("/auth/message/send", _Message_ListMessage0_HTTP_Handler(srv))
	r.POST("/auth/message/send", _Message_MarkMessage0_HTTP_Handler(srv))
}

func _Message_SendMessage0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageSendMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendMessage(ctx, req.(*SendMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendMessageReply)
		return ctx.Result(200, reply)
	}
}

func _Message_EditMessage0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageEditMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditMessage(ctx, req.(*EditMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EditMessageReply)
		return ctx.Result(200, reply)
	}
}

func _Message_RevokeMessage0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RevokeMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageRevokeMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RevokeMessage(ctx, req.(*RevokeMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RevokeMessageReply)
		return ctx.Result(200, reply)
	}
}

func _Message_ListMessage0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageListMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMessage(ctx, req.(*ListMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMessageReply)
		return ctx.Result(200, reply)
	}
}

func _Message_MarkMessage0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MarkMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageMarkMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MarkMessage(ctx, req.(*MarkMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MarkMessageReply)
		return ctx.Result(200, reply)
	}
}

type MessageHTTPClient interface {
	EditMessage(ctx context.Context, req *EditMessageRequest, opts ...http.CallOption) (rsp *EditMessageReply, err error)
	ListMessage(ctx context.Context, req *ListMessageRequest, opts ...http.CallOption) (rsp *ListMessageReply, err error)
	MarkMessage(ctx context.Context, req *MarkMessageRequest, opts ...http.CallOption) (rsp *MarkMessageReply, err error)
	RevokeMessage(ctx context.Context, req *RevokeMessageRequest, opts ...http.CallOption) (rsp *RevokeMessageReply, err error)
	SendMessage(ctx context.Context, req *SendMessageRequest, opts ...http.CallOption) (rsp *SendMessageReply, err error)
}

type MessageHTTPClientImpl struct {
	cc *http.Client
}

func NewMessageHTTPClient(client *http.Client) MessageHTTPClient {
	return &MessageHTTPClientImpl{client}
}

func (c *MessageHTTPClientImpl) EditMessage(ctx context.Context, in *EditMessageRequest, opts ...http.CallOption) (*EditMessageReply, error) {
	var out EditMessageReply
	pattern := "/auth/message/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMessageEditMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) ListMessage(ctx context.Context, in *ListMessageRequest, opts ...http.CallOption) (*ListMessageReply, error) {
	var out ListMessageReply
	pattern := "/auth/message/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMessageListMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) MarkMessage(ctx context.Context, in *MarkMessageRequest, opts ...http.CallOption) (*MarkMessageReply, error) {
	var out MarkMessageReply
	pattern := "/auth/message/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMessageMarkMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) RevokeMessage(ctx context.Context, in *RevokeMessageRequest, opts ...http.CallOption) (*RevokeMessageReply, error) {
	var out RevokeMessageReply
	pattern := "/auth/message/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMessageRevokeMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...http.CallOption) (*SendMessageReply, error) {
	var out SendMessageReply
	pattern := "/auth/message/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMessageSendMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
