// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.15.6
// source: api/portal/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserDeRegister = "/portal.v1.User/DeRegister"
const OperationUserGetSelfProfile = "/portal.v1.User/GetSelfProfile"
const OperationUserGetUserProfile = "/portal.v1.User/GetUserProfile"
const OperationUserLoginByMobile = "/portal.v1.User/LoginByMobile"
const OperationUserLogout = "/portal.v1.User/Logout"
const OperationUserUpdateProfile = "/portal.v1.User/UpdateProfile"

type UserHTTPServer interface {
	// DeRegister mobile login
	DeRegister(context.Context, *DeRegisterRequest) (*DeRegisterReply, error)
	// GetSelfProfile get self profile
	GetSelfProfile(context.Context, *GetSelfProfileRequest) (*GetSelfProfileReply, error)
	// GetUserProfile get user profile
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileReply, error)
	// LoginByMobile mobile login
	LoginByMobile(context.Context, *LoginByMobileRequest) (*LoginByMobileReply, error)
	// Logout mobile login
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	// UpdateProfile update profile
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileReply, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/user/login", _User_LoginByMobile0_HTTP_Handler(srv))
	r.POST("/auth/user/logout", _User_Logout0_HTTP_Handler(srv))
	r.POST("/auth/user/deregister", _User_DeRegister0_HTTP_Handler(srv))
	r.POST("/user/getprofile", _User_GetUserProfile0_HTTP_Handler(srv))
	r.POST("/auth/user/getselfprofile", _User_GetSelfProfile0_HTTP_Handler(srv))
	r.POST("/auth/user/updateprofile", _User_UpdateProfile0_HTTP_Handler(srv))
}

func _User_LoginByMobile0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByMobileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserLoginByMobile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByMobile(ctx, req.(*LoginByMobileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginByMobileReply)
		return ctx.Result(200, reply)
	}
}

func _User_Logout0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _User_DeRegister0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeRegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeRegister(ctx, req.(*DeRegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeRegisterReply)
		return ctx.Result(200, reply)
	}
}

func _User_GetUserProfile0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUserProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserProfile(ctx, req.(*GetUserProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserProfileReply)
		return ctx.Result(200, reply)
	}
}

func _User_GetSelfProfile0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSelfProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetSelfProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSelfProfile(ctx, req.(*GetSelfProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSelfProfileReply)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateProfile0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProfile(ctx, req.(*UpdateProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProfileReply)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	DeRegister(ctx context.Context, req *DeRegisterRequest, opts ...http.CallOption) (rsp *DeRegisterReply, err error)
	GetSelfProfile(ctx context.Context, req *GetSelfProfileRequest, opts ...http.CallOption) (rsp *GetSelfProfileReply, err error)
	GetUserProfile(ctx context.Context, req *GetUserProfileRequest, opts ...http.CallOption) (rsp *GetUserProfileReply, err error)
	LoginByMobile(ctx context.Context, req *LoginByMobileRequest, opts ...http.CallOption) (rsp *LoginByMobileReply, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutReply, err error)
	UpdateProfile(ctx context.Context, req *UpdateProfileRequest, opts ...http.CallOption) (rsp *UpdateProfileReply, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) DeRegister(ctx context.Context, in *DeRegisterRequest, opts ...http.CallOption) (*DeRegisterReply, error) {
	var out DeRegisterReply
	pattern := "/auth/user/deregister"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserDeRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetSelfProfile(ctx context.Context, in *GetSelfProfileRequest, opts ...http.CallOption) (*GetSelfProfileReply, error) {
	var out GetSelfProfileReply
	pattern := "/auth/user/getselfprofile"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGetSelfProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...http.CallOption) (*GetUserProfileReply, error) {
	var out GetUserProfileReply
	pattern := "/user/getprofile"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGetUserProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) LoginByMobile(ctx context.Context, in *LoginByMobileRequest, opts ...http.CallOption) (*LoginByMobileReply, error) {
	var out LoginByMobileReply
	pattern := "/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserLoginByMobile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/auth/user/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...http.CallOption) (*UpdateProfileReply, error) {
	var out UpdateProfileReply
	pattern := "/auth/user/updateprofile"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
