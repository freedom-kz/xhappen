// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/business/v1/service.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassClient is the client API for Pass service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassClient interface {
	Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindReply, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error)
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error)
	Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionReply, error)
	Quit(ctx context.Context, in *QuitRequest, opts ...grpc.CallOption) (*QuitReply, error)
}

type passClient struct {
	cc grpc.ClientConnInterface
}

func NewPassClient(cc grpc.ClientConnInterface) PassClient {
	return &passClient{cc}
}

func (c *passClient) Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindReply, error) {
	out := new(BindReply)
	err := c.cc.Invoke(ctx, "/chatnormal.v1.Pass/Bind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, "/chatnormal.v1.Pass/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error) {
	out := new(SubmitReply)
	err := c.cc.Invoke(ctx, "/chatnormal.v1.Pass/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passClient) Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := c.cc.Invoke(ctx, "/chatnormal.v1.Pass/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passClient) Quit(ctx context.Context, in *QuitRequest, opts ...grpc.CallOption) (*QuitReply, error) {
	out := new(QuitReply)
	err := c.cc.Invoke(ctx, "/chatnormal.v1.Pass/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassServer is the server API for Pass service.
// All implementations must embed UnimplementedPassServer
// for forward compatibility
type PassServer interface {
	Bind(context.Context, *BindRequest) (*BindReply, error)
	Auth(context.Context, *AuthRequest) (*AuthReply, error)
	Submit(context.Context, *SubmitRequest) (*SubmitReply, error)
	Action(context.Context, *ActionRequest) (*ActionReply, error)
	Quit(context.Context, *QuitRequest) (*QuitReply, error)
	mustEmbedUnimplementedPassServer()
}

// UnimplementedPassServer must be embedded to have forward compatible implementations.
type UnimplementedPassServer struct {
}

func (UnimplementedPassServer) Bind(context.Context, *BindRequest) (*BindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedPassServer) Auth(context.Context, *AuthRequest) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedPassServer) Submit(context.Context, *SubmitRequest) (*SubmitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedPassServer) Action(context.Context, *ActionRequest) (*ActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedPassServer) Quit(context.Context, *QuitRequest) (*QuitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (UnimplementedPassServer) mustEmbedUnimplementedPassServer() {}

// UnsafePassServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassServer will
// result in compilation errors.
type UnsafePassServer interface {
	mustEmbedUnimplementedPassServer()
}

func RegisterPassServer(s grpc.ServiceRegistrar, srv PassServer) {
	s.RegisterService(&Pass_ServiceDesc, srv)
}

func _Pass_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatnormal.v1.Pass/Bind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).Bind(ctx, req.(*BindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pass_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatnormal.v1.Pass/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pass_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatnormal.v1.Pass/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pass_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatnormal.v1.Pass/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).Action(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pass_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatnormal.v1.Pass/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).Quit(ctx, req.(*QuitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pass_ServiceDesc is the grpc.ServiceDesc for Pass service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pass_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatnormal.v1.Pass",
	HandlerType: (*PassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bind",
			Handler:    _Pass_Bind_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Pass_Auth_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _Pass_Submit_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _Pass_Action_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _Pass_Quit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/business/v1/service.proto",
}
