// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
	"xhappen/app/portal/internal/biz"
	"xhappen/app/portal/internal/conf"
	"xhappen/app/portal/internal/data"
	"xhappen/app/portal/internal/event"
	"xhappen/app/portal/internal/server"
	"xhappen/app/portal/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger, registrar registry.Registrar, sender event.Sender) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	smsRepo := data.NewSMSRepo(dataData, logger)
	userUseCase := biz.NewUserUseCase(userRepo, smsRepo, sender, logger)
	jwtRepo := data.NewJwtRepo(dataData, logger)
	jwtUseCase := biz.NewJwtUseCase(bootstrap, jwtRepo, logger)
	userService := service.NewUserService(userUseCase, jwtUseCase, logger)
	grpcServer := server.NewGRPCServer(bootstrap, userService, logger)
	httpServer := server.NewHTTPServer(bootstrap, userService, logger)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
